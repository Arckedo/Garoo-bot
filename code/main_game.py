import random
from roles import *
from bot.interactions import GarooClient, GarooEmbed, GarooVote
from datetime import datetime
from discord import Colour


class Game:
    def __init__(
        self,
        client: GarooClient,
        id_list: list[int],
        turn_count: int,
        game_creator: int,
        role_list: list[Role] = None
    ):
        """
        Initialise la partie avec les param√®tres fournis.

        Args:
            client (GarooClient): Client Discord utilisable par le jeu.
            id_list (list): Liste des identifiants des joueurs.
            turn_count (int): Compteur de tours.
            role_list (list): Liste des r√¥les
            game_creator (int): ID du joueur qui a cr√©e la partie.
            wolf_kill (str, optional): ID du joueur qui a tue le Loup-Garou.
        """

        self.client = client
        self.id_list = id_list
        self.turn_count = turn_count
        self.mayor_id = None
        self.game_creator = game_creator
        self.wolf_kill = None
        self.role_list = self.role_list_creation()
        role_list = sorted(self.role_list, key=role_order_sort)
        self.start(role_list)

        self.alive_notif = self.alive_sort()


    def role_list_creation(self):
        """
        Cr√©e la liste de r√¥les.

        Returns:
            list: Liste de r√¥les.
        """
        entries= []
        entries.append(("1", 0))
        entries.append(("2", 1))
        entries.append(("3", 2))
        interface = GarooVote(
            entries=entries,
            filter=[self.game_creator]
        )
        embed= GarooEmbed(
            title = "__Choisissez les r√¥les__",
            description = (f"Pour commencer la partie, choisissez une liste de roles parmit les 3 suivantes \n1 : {', '.join(roles_combinaton[len(self.id_list)-3][0])}"
                           f"\n2 : {', '.join(roles_combinaton[len(self.id_list)-3][1])}"
                           f"\n3 : {', '.join(roles_combinaton[len(self.id_list)-3][2])}"),
            color = Colour.blue()
        )
        dico_vote = self.client.send_interface(interface=interface, embed=embed)
        max_keys = [
            key
            for key, value in dico_vote.items()
            if value == max(dico_vote.values())
        ]
        return roles_combinaton[len(self.id_list)-3][max_keys[0]]

    def start(self, role_list: list[Role]):
        """
        D√©marre la partie en attribuant un r√¥le √† chaque joueur.

        Args:
            role_list (list): Liste des r√¥les √† attribuer √† chaque joueur.
        """

        self.role_list: list[Role] = []
        # M√©lange les id des joueurs
        shuff_id_list = list(self.id_list)
        random.shuffle(shuff_id_list)

        dict_role_class = {
            "werewolf": Werewolf,
            "villager": Villager,
            "seer": Seer,
            "witch": Witch,
            "hunter": Hunter,
            "thief": Thief,
        }

        # Parcourt les listes de joueurs et de r√¥les simultan√©ment
        for player_id, str_role in zip(shuff_id_list, role_list):
            # R√©cup√®re la classe de r√¥le correspondante au nom de r√¥le
            role_class = dict_role_class[str_role]

            # V√©rifie si la classe de r√¥le n'est pas d√©j√† dans la liste de r√¥les
            if role_class not in self.role_list:
                # Cr√©e un nouveau r√¥le avec un joueur et l'ajoute √† la liste de r√¥les
                role = role_class([Player(id=player_id)])
                self.role_list.append(role)
            else:
                # Si la classe de r√¥le est d√©j√† pr√©sente, ajoute un nouveau joueur au r√¥le existant
                for role in self.role_list:
                    if role_class == type(role):
                        role.player_list.append(Player(id=player_id, is_alive=True))

        for role in self.role_list:
            for player in role.lst_player:
                embed = GarooEmbed(
                    title=f"**{role}**",
                    description=role.description,
                    color=Colour.gold(),
                    thumbnail={"url": role.image},
                )
                dest = self.client.get_user(player.id)
                self.client.send(embed=embed, dest=dest)

    def game_loop(self):
        """
        Effectue la boucle du jeu.
        """
        while True:
            if self.turn_count == 0:
                # INTERACTION √Ä REMPLACER (Front)
                self.mayor_vote()

            self.turn_count += 1
            self.night_turn()

            end, winner = self.end()
            if end:
                embed = GarooEmbed(
                    title=f"üî•La Partie est termin√©e !",
                    description=winner,
                    colour=Colour.green(),
                )
                self.client.send(embed=embed)
                break

            self.day_turn()

            end, winner = self.end()
            if end:
                embed = GarooEmbed(
                    title=f"üî•La Partie est termin√©e !",
                    description=winner,
                    colour=Colour.green(),
                )
                self.client.send(embed=embed)
                break

    def mayor_vote(self):
        """
        Effectue le processus de vote pour √©lire le maire de Thiercelieux.

        Si le maire actuel est d√©fini, affiche une interface de vote restreinte
        √† tous les joueurs vivants sauf le maire, pour lequel un seul vote est autoris√©.
        Si aucun joueur n'est √©lu lors de ce premier tour, recommence le processus de vote.
        Si un joueur est √©lu, le d√©signe comme nouveau maire et met fin au processus de vote.

        Si aucun joueur n'est √©lu lors du premier tour, affiche une interface de vote pour tous
        les joueurs vivants. En cas d'√©galit√© des votes, le maire est d√©sign√© par le joueur
        ayant obtenu le vote du maire actuel. Si aucun joueur n'obtient ce vote, le processus
        de vote est r√©initialis√© jusqu'√† ce qu'un joueur soit √©lu maire.
        """
        lst_alive = self.alive_sort()
        stop = False

        if self.mayor_id is not None:
            interface = GarooVote(
                entries=self.entries(lst_alive), filter=[self.mayor_id]
            )
            dico_vote = self.game_embed_interface(
                interface=interface,
                title="‚öñÔ∏è __L'h√©ritage du maire de Thiercelieux__ ‚öñÔ∏è",
                description=("√Ä Thiercelieux, lors de la succession du maire, "
                             "les villageois se r√©unissent avec gravit√©. Chacun exprime ses choix, les candidats exposent leurs arguments. "
                             "Les votes sont recueillis, et le nom du successeur est annonc√©, marquant ainsi un tournant pour le village."),
                thumbnail={
                    "url": "https://th.bing.com/th/id/OIG3.NTqM_6GH4PlXQHh1fkN8"
                },
            )
            for player in dico_vote:
                if dico_vote[player] == 1:
                    embed = GarooEmbed(
                        title="‚öñÔ∏è __Le Choix du maire de Thiercelieux__ ‚öñÔ∏è",
                        description=f"Le Maire est {self.mention(player)} !",
                        colour=Colour.green(),
                    )
                    self.client.send(embed=embed)
                    self.mayor_id = player
                    stop = True
            if stop == False:
                self.mayor_vote()

        while stop == False:
            interface = GarooVote(entries=self.entries(lst_alive), filter=lst_alive)

            dico_vote = self.game_embed_interface(
                interface=interface,
                title="‚öñÔ∏è __Le Choix du maire de Thiercelieux__ ‚öñÔ∏è",
                description=("√Ä Thiercelieux, lors du vote pour le maire, les villageois se r√©unissent avec s√©rieux. "
                             "Chacun exprime son choix avec attention. Les candidats font leurs discours, essayant de convaincre. "
                             "Les votes sont d√©pos√©s dans l'urne. Le nom du nouveau maire est annonc√©, scellant ainsi le destin du village."),
                thumbnail={
                    "url": "https://th.bing.com/th/id/OIG2.7ICIfw0NlW2tpNZ8O0Eu"
                },
            )

            # Renvoie la liste des cl√©es de dico_vote dont la valeur est la plus grande
            max_keys = [
                key
                for key, value in dico_vote.items()
                if value == max(dico_vote.values())
            ]

            if len(max_keys) == 1:
                for role in self.role_list:
                    for player in role.lst_player:
                        if player.id == max_keys[0]:
                            player.is_mayor = True

                            embed = GarooEmbed(
                                title="‚öñÔ∏è __Le Choix du maire de Thiercelieux__ ‚öñÔ∏è",
                                description=f"Le Maire est {self.mention(player.id)} !",
                                colour=Colour.green(),
                            )
                            self.client.send(embed=embed)
                            stop = True
                            self.mayor_id = player.id
            else:
                embed = GarooEmbed(
                    title="‚öñÔ∏è __Le Choix du maire de Thiercelieux__ ‚öñÔ∏è",
                    description=("Les joueurs suivants ont eu le m√™me nombre de vote : "
                                 ", ".join([self.mention(player) for player in max_keys]) +
                                 " !"),
                    colour=Colour.orange(),
                )
                self.client.send(embed=embed)

    def night_turn(self):
        """
        Effectue les actions de la nuit pour chaque r√¥le.

        Affiche un message de bonne nuit √† tous les joueurs et ex√©cute les actions sp√©cifiques √† chaque r√¥le
        participant pendant la nuit.
        """
        self.game_embed(
            day=False,
            title=f"üåô __Nuit {self.turn_count}__ üåô",
            thumbnail={"url": "https://th.bing.com/th/id/OIG2.3wENrtbwnfbEO5lMpuxI"},
            description="Bonne nuit √† toutes et √† tous !",
        )

        for role in self.role_list:
            if type(role) in night_action_list:
                role.night_action(game=self)

    def day_turn(self):
        """
        Effectue les actions du jour apr√®s la nuit.

        Affiche un message indiquant le d√©but du jour, notifie les joueurs d√©c√©d√©s et ressuscit√©s pendant la nuit,
        et ex√©cute les actions sp√©cifiques √† chaque r√¥le participant pendant la journ√©e. Si le maire est d√©c√©d√© pendant
        la nuit, lance le processus de vote pour √©lire un nouveau maire.
        """

        death, resur = self.alive_notification()

        self.game_embed(
            title=f"üåÖ __Jour {self.turn_count}__ üåÖ",
            thumbnail={"url": "https://th.bing.com/th/id/OIG2.OColV0JanmsfatOIhZge"},
            description=("L'aube √©blouit Thiercelieux, Les joueurs suivant sont morts cette nuit : "
                        f"{', '.join(f'{self.mention(player)} : {self.find_role(player)}' for player in death)}"),
        )

        if self.mayor_id in death:
            self.game_embed(title=f"üëë __Le maire est mort__ üëë")
            self.mayor_vote()

        for role in self.role_list:
            if type(role) in day_action_list:
                role.day_action(game=self)

            end, winner = self.end()
            if end:
                return
        # Appel de la fonction de vote
        self.day_vote()

    def day_vote(self):
        """
        Effectue le processus de vote pendant la journ√©e pour condamner un joueur.

        Les joueurs vivants participent au vote pour d√©signer celui qu'ils croient √™tre un loup-garou.
        En cas de victoire d'un seul joueur, ce dernier est condamn√© et retir√© du jeu. Si le joueur
        condamn√© est le maire, le jeu annonce sa mort et ouvre un nouveau processus de vote pour √©lire
        un nouveau maire.

        En cas d'√©galit√© des votes, le maire actuel est appel√© √† trancher le vote. Si aucun joueur
        n'obtient le vote du maire, le processus de vote est relanc√© jusqu'√† ce qu'un joueur soit condamn√©.
        """
        lst_alive = self.alive_sort()

        interface = GarooVote(
            entries=self.entries(lst_alive), filter=lst_alive, weight={self.mayor_id: 2}
        )

        dico_vote = self.game_embed_interface(
            interface=interface,
            title="‚öñÔ∏è __Le Jugement de Thiercelieux__ ‚öñÔ∏è",
            description=("Au cr√©puscule √† Thiercelieux, les villageois se rassemblent en cercle, scrutant les visages avec suspicion. "
                         "Chacun accuse et vote pour celui qu'il croit √™tre un loup-garou. Les c≈ìurs battent la chamade alors que le verdict se profile. "
                         "La tension est √† son comble jusqu'√† ce que le nom du condamn√© soit prononc√©, "
                         "scellant le destin du village pour cette nuit-l√†."),
            thumbnail={"url": "https://th.bing.com/th/id/OIG3.Oyo.LIt40eLhGtoZU0T_"},
        )

        # Renvoie la liste des cl√©es de dico_vote dont la valeur est la plus grande
        max_keys = [
            key for key, value in dico_vote.items() if value == max(dico_vote.values())
        ]

        if len(max_keys) == 1:
            for role in self.role_list:
                for player in role.lst_player:
                    if player.id == max_keys[0]:
                        player.is_alive = False
                        self.alive_notification()
                        self.game_embed(
                            title=f"üî• __{self.name(player.id)} est brul√©e sur la place de thercelieux!__ üî•",
                            description=f"Son role √©tait {role} !",
                        )
                        if player.id == self.mayor_id:
                            self.game_embed(title=f"üëë __Le maire est mort__ üëë")
                        self.mayor_vote()
        else:
            interface = GarooVote(
                entries=self.entries(max_keys), filter=[self.mayor_id]
            )
            embed = GarooEmbed(
                title="‚öñÔ∏è __Le Jugement du Maire__ ‚öñÔ∏è",
                description=("Les joueurs suivants ont eu le m√™me nombre de vote : "
                             ", ".join([self.mention(player) for player in max_keys]) +
                             "\nLe maire va trancher le vote !"),
                colour=Colour.orange(),
            )
            dico_vote = self.client.send_interface(interface=interface, embed=embed)

            max_keys = [
                key
                for key, value in dico_vote.items()
                if value == max(dico_vote.values())
            ]

            for role in self.role_list:
                for player in role.lst_player:
                    if player.id == max_keys[0]:
                        player.is_alive = False
                        self.alive_notification()
                        self.game_embed(
                            title=f"üî• __{self.name(player.id)} est brul√©e sur la place de thercelieux!__ üî•",
                            description=f"Son role √©tait {role} !",
                        )
                        if player.id == self.mayor_id:
                            self.game_embed(title=f"üëë __Le maire est mort__ üëë")
                            self.mayor_vote()

    def end(self):
        """
        V√©rifie si la partie est termin√©e et d√©termine le vainqueur.

        Returns:
            tuple: Un tuple contenant un bool√©en indiquant si la partie est termin√©e et un message de r√©sultat.
                - Si la partie est termin√©e, le bool√©en est True et le message indique le vainqueur.
                - Sinon, le bool√©en est False et le message est None.
        """
        wolf = 0
        villager = 0
        for role in self.role_list:
            for player in role.lst_player:
                if player.is_alive == True:
                    if type(role) == Werewolf:
                        wolf += 1
                    else:
                        villager += 1
        if wolf == 0 and villager == 0:
            return (
                True,
                "**Les Arbres de la forets** ont gagn√©, les Loups-Garous et les Villageois sont tous morts !",
            )
        elif wolf == 0:
            return (
                True,
                "Les Loups-Garous sont tous morts, **Les villageois ont gagn√© !**",
            )
        elif villager == 0:
            return (
                True,
                "Les Villageois sont tous morts, **Les Loups-Garous ont gagn√© !**",
            )
        else:
            return (False, None)

    def alive_sort(self):
        """
        Trie les joueurs vivants et retourne une liste de leurs identifiants.

        Returns:
            list: Liste des identifiants des joueurs vivants.
        """
        lst = []
        for role in self.role_list:
            for player in role.lst_player:
                if player.is_alive == True:
                    lst.append(player.id)
        return lst

    def dic_role_sort(self):
        """
        Trie les joueurs par r√¥le et retourne un dictionnaire associant chaque joueur √† son r√¥le.

        Returns:
            dict: Dictionnaire associant les identifiants des joueurs √† leurs r√¥les.
        """
        dic = {}
        for role in self.role_list:
            for player in role.lst_player:
                dic[player.id] = str(role)
        return dic

    def alive_notification(self):
        """
        Notifie les √©v√©nements de d√©c√®s et de r√©surrection des joueurs.

        Returns:
            tuple: Une paire de listes contenant les identifiants des joueurs d√©c√©d√©s et ressuscit√©s.
        """
        death = []
        resur = []

        for role in self.role_list:
            for player in role.lst_player:
                if player.is_alive == False and player.id in self.alive_notif:
                    death.append(player.id)
                if player.is_alive == True and player.id not in self.alive_notif:
                    resur.append(player.id)
        self.alive_notif = self.alive_sort()
        return death, resur

    def find_role(self, player_id):
        """
        Trouve le r√¥le d'un joueur √† partir de son identifiant.

        Args:
            player_id (int): L'identifiant du joueur.

        Returns:
            str: Le r√¥le du joueur.
        """
        for role in self.role_list:
            for player in role.lst_player:
                if player.id == player_id:
                    return role

    def name(self, player_id):
        """
        Trouve le r√¥le d'un joueur √† partir de son identifiant.

        Args:
            player_id (int): L'identifiant du joueur.

        Returns:
            str: Le r√¥le du joueur.
        """
        return self.client.get_user(player_id).display_name

    def mention(self, player_id):
        """
        Renvoie la mention d'un joueur √† partir de son identifiant.

        Args:
            player_id (int): L'identifiant du joueur.

        Returns:
            str: La mention du joueur.
        """
        return self.client.get_user(player_id).mention

    def name_lst(self, lst):
        """
        Renvoie une liste des noms d'affichage des joueurs √† partir d'une liste d'identifiants.

        Args:
            lst (list): Liste des identifiants des joueurs.

        Returns:
            list: Liste des noms d'affichage des joueurs.
        """
        return [self.client.get_user(player_id).display_name for player_id in lst]

    def mention_lst(self, lst):
        """
        Renvoie une liste des mentions des joueurs √† partir d'une liste d'identifiants.

        Args:
            lst (list): Liste des identifiants des joueurs.

        Returns:
            list: Liste des mentions des joueurs.
        """
        return [self.client.get_user(player_id).mention for player_id in lst]

    def entries(self, lst_entries):
        """
        Trie et renvoie une liste de tuples contenant les noms d'affichage et les identifiants des joueurs.

        Args:
            lst_entries (list): Liste des identifiants des joueurs.

        Returns:
            list: Liste de tuples contenant les noms d'affichage et les identifiants des joueurs.
        """
        lst_entries.sort()
        lst = []
        for player_id in lst_entries:
            lst.append((self.client.get_user(player_id).display_name, player_id))
        return lst

    def game_embed(self, day=True, **kwargs):
        """
        Cr√©e un embed pour la partie en cours.

        Args:
            day (bool, optional): Indique si c'est le jour ou la nuit. Par d√©faut, True.
            **kwargs: Arguments suppl√©mentaires √† passer √† l'embed.

        Returns:
            discord.Message: Message contenant l'embed cr√©√©.
        """
        if day == True:
            footer = {
                "text": f"Jour {self.turn_count} - {len(self.alive_sort())}/{len(self.id_list)} joueurs en vie",
                "icon_url": "https://media.istockphoto.com/id/1210517109/vector/sun-icon-vector-for-your-web-design-logo-ui-illustration.jpg?s=612x612&w=0&k=20&c=-HOJe8OyVmap1_0NDUotr2vjZ3TxVKCGA2ga9H7klvU=",
            }
        else:
            footer = {
                "text": f"Nuit {self.turn_count} - {len(self.alive_sort())}/{len(self.id_list)} joueurs en vie",
                "icon_url": "https://static.vecteezy.com/ti/vecteur-libre/p1/5569430-lune-nuit-clair-de-lune-minuit-icone-solide-illustrationle-modele-de-logo-adapte-a-de-nombreux-usages-gratuit-vectoriel.jpg",
            }

        embed = GarooEmbed(
            author={
                "name": f"GarooBot - Partie de {self.client.get_user(self.game_creator).display_name}",
                "icon_url": "https://cdn.discordapp.com/avatars/1194956794812964874/029a2286b5d3df9632402b7db7336a71.webp",
            },
            colour=0x6C58FF,
            footer=footer,
            timestamp=datetime.now(),
            **kwargs,
        )
        return self.client.send(embed=embed)

    def game_embed_interface(self, interface, day=True, **kwargs):
        """
        Cr√©e un embed pour l'interface de jeu en cours.

        Args:
            interface (discord.ui.View): L'interface de jeu.
            day (bool, optional): Indique si c'est le jour ou la nuit. Par d√©faut, True.
            **kwargs: Arguments suppl√©mentaires √† passer √† l'embed.

        Returns:
            discord.Message: Message contenant l'interface de jeu et l'embed cr√©√©s.
        """
        if day == True:
            footer = {
                "text": f"Jour {self.turn_count} - {len(self.alive_sort())}/{len(self.id_list)} joueurs en vie",
                "icon_url": "https://media.istockphoto.com/id/1210517109/vector/sun-icon-vector-for-your-web-design-logo-ui-illustration.jpg?s=612x612&w=0&k=20&c=-HOJe8OyVmap1_0NDUotr2vjZ3TxVKCGA2ga9H7klvU=",
            }
        else:
            footer = {
                "text": f"Nuit {self.turn_count} - {len(self.alive_sort())}/{len(self.id_list)} joueurs en vie",
                "icon_url": "https://img.freepik.com/vecteurs-premium/croissant-etoiles-icone-noire-au-clair-lune-symbole-reve-isole-fond-blanc_53562-22909.jpg",
            }

        embed = GarooEmbed(
            author={
                "name": f"GarooBot - Partie de {self.client.get_user(self.game_creator).display_name}",
                "icon_url": "https://cdn.discordapp.com/avatars/1194956794812964874/029a2286b5d3df9632402b7db7336a71.webp?size=80",
            },
            colour=0x6C58FF,
            footer=footer,
            timestamp=datetime.now(),
            **kwargs,
        )
        return self.client.send_interface(interface=interface, embed=embed)
